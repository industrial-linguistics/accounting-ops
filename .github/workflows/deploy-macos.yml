name: Build and Deploy macOS DMG

on:
  release:
    types:
      - published

jobs:
  build-and-deploy:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup code signing keychain
        if: ${{ secrets.MACOS_SIGNING_CERTIFICATE && secrets.MACOS_SIGNING_CERTIFICATE_PASSWORD && secrets.MACOS_SIGNING_IDENTITY }}
        env:
          MACOS_SIGNING_CERTIFICATE: ${{ secrets.MACOS_SIGNING_CERTIFICATE }}
          MACOS_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          set -euo pipefail
          CERT_PATH="$RUNNER_TEMP/signing-cert.p12"
          KEYCHAIN_PATH="$RUNNER_TEMP/signing.keychain-db"
          echo "$MACOS_SIGNING_CERTIFICATE" | base64 --decode > "$CERT_PATH"
          security create-keychain -p "$MACOS_SIGNING_CERTIFICATE_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$MACOS_SIGNING_CERTIFICATE_PASSWORD" "$KEYCHAIN_PATH"
          security import "$CERT_PATH" -k "$KEYCHAIN_PATH" -P "$MACOS_SIGNING_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          rm -f "$CERT_PATH"
          security list-keychains -d user > /tmp/pre-existing-keychains
          security list-keychains -d user -s "$KEYCHAIN_PATH" $(tr -d '"' < /tmp/pre-existing-keychains | xargs)
          security default-keychain -d user -s "$KEYCHAIN_PATH"
          echo "MACOS_SIGNING_KEYCHAIN=$KEYCHAIN_PATH" >> "$GITHUB_ENV"

      - name: Install Qt
        run: |
          brew update
          brew install qt

      - name: Configure
        run: |
          QT_PREFIX=$(brew --prefix qt)
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$QT_PREFIX"

      - name: Build
        run: cmake --build build --config Release

      - name: Create DMG
        run: |
          cpack --config build/CPackConfig.cmake
          ls -al build

      - name: Sign disk image
        if: ${{ env.MACOS_SIGNING_KEYCHAIN && secrets.MACOS_SIGNING_IDENTITY }}
        env:
          MACOS_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
          MACOS_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          set -euo pipefail
          DMG=$(ls build/*.dmg)
          security unlock-keychain -p "$MACOS_SIGNING_CERTIFICATE_PASSWORD" "$MACOS_SIGNING_KEYCHAIN"
          codesign --deep --force --options runtime --sign "$MACOS_SIGNING_IDENTITY" "$DMG"

      - name: Notarize disk image
        if: ${{ env.MACOS_SIGNING_KEYCHAIN && secrets.MACOS_NOTARY_APPLE_ID && secrets.MACOS_NOTARY_TEAM_ID && secrets.MACOS_NOTARY_APP_PASSWORD }}
        env:
          MACOS_NOTARY_APPLE_ID: ${{ secrets.MACOS_NOTARY_APPLE_ID }}
          MACOS_NOTARY_TEAM_ID: ${{ secrets.MACOS_NOTARY_TEAM_ID }}
          MACOS_NOTARY_APP_PASSWORD: ${{ secrets.MACOS_NOTARY_APP_PASSWORD }}
        run: |
          set -euo pipefail
          DMG=$(ls build/*.dmg)
          xcrun notarytool submit "$DMG" --apple-id "$MACOS_NOTARY_APPLE_ID" --team-id "$MACOS_NOTARY_TEAM_ID" --password "$MACOS_NOTARY_APP_PASSWORD" --wait
          xcrun stapler staple "$DMG"

      - name: Clean up code signing keychain
        if: env.MACOS_SIGNING_KEYCHAIN
        run: |
          set -euo pipefail
          if [ -f /tmp/pre-existing-keychains ]; then
            security list-keychains -d user -s $(tr -d '"' < /tmp/pre-existing-keychains | xargs)
            DEFAULT_KEYCHAIN=$(head -n 1 /tmp/pre-existing-keychains | tr -d '" ')
            if [ -n "$DEFAULT_KEYCHAIN" ]; then
              security default-keychain -d user -s "$DEFAULT_KEYCHAIN"
            fi
          fi
          security delete-keychain "$MACOS_SIGNING_KEYCHAIN" || true

      - name: Configure SSH
        env:
          DEPLOYMENT_SSH_KEY: ${{ secrets.DEPLOYMENT_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOYMENT_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H merah.cassia.ifost.org.au >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          ARTIFACT=$(ls build/*.dmg)
          ssh aops@merah.cassia.ifost.org.au "mkdir -p /var/www/vhosts/packages.industrial-linguistics.com/htdocs/accounting-ops/macos"
          scp "$ARTIFACT" aops@merah.cassia.ifost.org.au:/var/www/vhosts/packages.industrial-linguistics.com/htdocs/accounting-ops/macos/
