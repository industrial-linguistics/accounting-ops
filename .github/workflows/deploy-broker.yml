name: Deploy OAuth Broker

on:
  push:
    branches:
      - main        # Production deployment
      - develop     # Development deployment
      - 'feature/**'  # Development deployment
    paths:
      - 'cmd/broker/**'
      - 'internal/broker/**'
      - 'scripts/build_deploy_broker.sh'
      - '.github/workflows/deploy-broker.yml'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

jobs:
  deploy:
    name: Deploy to ${{ github.ref_name == 'main' && 'Production' || 'Development' }}
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy broker to server
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          ssh aops@merah.cassia.ifost.org.au << ENDSSH
            set -e
            echo "==> Navigating to accounting-ops repository..."
            cd ~/accounting-ops

            echo "==> Current branch:"
            git branch --show-current

            echo "==> Fetching and checking out ${BRANCH}..."
            git fetch origin
            git checkout ${BRANCH}
            git pull origin ${BRANCH}

            echo "==> Running build and deploy script..."
            ./scripts/build_deploy_broker.sh

            echo "==> Deployment complete!"
          ENDSSH

      - name: Verify deployment
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          # Determine domain based on branch
          if [ "$BRANCH" = "main" ]; then
            DOMAIN="auth.industrial-linguistics.com"
            ENV_NAME="Production"
          else
            DOMAIN="auth-dev.industrial-linguistics.com"
            ENV_NAME="Development"
          fi

          echo "==> Verifying ${ENV_NAME} broker at ${DOMAIN}..."
          echo "Waiting 5 seconds for broker to initialize..."
          sleep 5

          # Test health endpoint first
          echo "Testing health endpoint..."
          HEALTH_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://${DOMAIN}/cgi-bin/broker/healthz || echo "000")
          echo "Health endpoint HTTP code: $HEALTH_CODE"

          if [ "$HEALTH_CODE" = "200" ]; then
            echo "✓ Broker is healthy!"
          else
            echo "⚠️  WARNING: Health endpoint returned $HEALTH_CODE"
          fi

          # Test auth endpoint
          echo "Testing auth endpoint..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://${DOMAIN}/cgi-bin/broker/v1/auth/start \
            -X POST \
            -H "Content-Type: application/json" \
            -d '{"provider":"qbo","profile":"test"}' || echo "000")

          echo "Auth endpoint HTTP code: $HTTP_CODE"

          if [ "$HTTP_CODE" = "404" ]; then
            echo "⚠️  WARNING: Broker still returning 404. Check server logs."
            echo "This may be expected if broker.env is not configured yet."
            exit 0
          elif [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "400" ] || [ "$HTTP_CODE" = "500" ]; then
            echo "✓ Broker is responding (HTTP $HTTP_CODE)"
            exit 0
          else
            echo "✗ Unexpected response code: $HTTP_CODE"
            exit 1
          fi

      - name: Deployment notification
        if: always()
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [ "$BRANCH" = "main" ]; then
            DOMAIN="auth.industrial-linguistics.com"
            ENV_NAME="Production"
          else
            DOMAIN="auth-dev.industrial-linguistics.com"
            ENV_NAME="Development"
          fi

          if [ "${{ job.status }}" = "success" ]; then
            echo "✓ Broker deployed successfully to ${ENV_NAME} (${DOMAIN})"
          else
            echo "✗ Deployment to ${ENV_NAME} failed. Check logs above."
            exit 1
          fi
